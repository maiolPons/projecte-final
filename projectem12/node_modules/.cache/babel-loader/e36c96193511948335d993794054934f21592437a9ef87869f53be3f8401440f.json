{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maiol\\\\Desktop\\\\projectem12\\\\src\\\\pages\\\\party.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { Modal, Button, Card, Container, Row, Col } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Party() {\n  _s();\n  let navigate = useNavigate();\n  if (sessionStorage.getItem(\"username\") == \"admin\") {\n    navigate(\"/admin\");\n    //window.location.href = '/admin';\n  } else if (!sessionStorage.getItem(\"username\")) {\n    navigate(\"/\");\n    //window.location.href = '/';\n  }\n\n  const [pendingFriends, setPendingFriends] = useState([]);\n  const [confirmedFriends, setConfirmedFriends] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [selectedFriend, setSelectedFriend] = useState(null);\n  const [selectedFriendUsername, setSelectedFriendUsername] = useState(null);\n  const [currentUser, setCurrentUser] = useState(sessionStorage.getItem('username'));\n  const [messageInput, setMessageInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const chatWindowRef = useRef(null); // Reference to the chat window container\n  const [showModal, setShowModal] = useState(false);\n  const [selectedEmote, setSelectedEmote] = useState(null);\n  const [emotes, setEmotes] = useState([]);\n  var oldlen = null;\n  //emote\n\n  console.log(sessionStorage);\n  function handleEmoteSelection(emote) {\n    setSelectedEmote(emote);\n    setShowModal(false);\n    if (selectedFriend) {\n      let senderId;\n      let receiverId;\n      if (selectedFriend.sender.username === currentUser) {\n        receiverId = selectedFriend.receiver.id;\n        senderId = selectedFriend.sender.id;\n      } else {\n        receiverId = selectedFriend.sender.id;\n        senderId = selectedFriend.receiver.id;\n      }\n      const sendEmote = (senderId, receiverId, emoteId) => {\n        return axios.post('http://localhost:8080/emotes/sendEmote', {\n          senderId: senderId,\n          receiverId: receiverId,\n          emoteId: emoteId\n        });\n      };\n      sendEmote(senderId, receiverId, emote.id).then(response => {\n        console.log('Emote sent successfully');\n        // Do something with the response if needed\n      }).catch(error => {\n        console.error('Error sending emote:', error);\n        alert('Error sending emote. Please try again later.');\n      });\n    }\n  }\n\n  ////////////Do on load////////////////\n  useEffect(() => {\n    async function fetchEmotes() {\n      try {\n        const response = await axios.get('http://localhost:8080/emotes');\n        setEmotes(response.data);\n      } catch (error) {\n        console.error('Error fetching emotes:', error);\n      }\n    }\n    fetchEmotes();\n  }, []);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await axios.get(`http://localhost:8080/friend/pending?username=${currentUser}`);\n        setPendingFriends(response.data);\n        setErrorMessage('');\n      } catch (error) {\n        setPendingFriends([]);\n        if (error.response) {\n          const errorMessage = error.response.data.message;\n          setErrorMessage(errorMessage);\n        } else {\n          setErrorMessage('An error occurred while fetching pending friends.');\n        }\n      }\n    }\n    fetchData();\n  }, [currentUser]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await axios.get(`http://localhost:8080/friend/confirmed?username=${currentUser}`);\n        setConfirmedFriends(response.data);\n        setErrorMessage('');\n      } catch (error) {\n        setConfirmedFriends([]);\n        if (error.response) {\n          const errorMessage = error.response.data.message;\n          setErrorMessage(errorMessage);\n        } else {\n          setErrorMessage('An error occurred while fetching confirmed friends.');\n        }\n      }\n    }\n    fetchData();\n  }, [currentUser]);\n  ////////////accept friendship////////////////\n  function handleAddFriend(friendId) {\n    axios.put(`http://localhost:8080/friend/${friendId}/accept`).then(response => {\n      window.location.href = '/';\n      console.log('Friend request accepted successfully');\n    }).catch(error => {\n      alert(\"Error with the request, try it later\");\n      console.error('Error accepting friend request:', error);\n    });\n  }\n  ////////////Deny friendship////////////////\n  function handleCancelFriendship(friendId) {\n    axios.delete(`http://localhost:8080/friend/${friendId}`).then(response => {\n      window.location.href = '/';\n      console.log('Friend request cancelled successfully');\n    }).catch(error => {\n      alert(\"Error with the request, try it later\");\n      console.error('Error cancelling friend request:', error);\n    });\n  }\n  useEffect(() => {\n    let interval;\n    if (selectedFriend) {\n      fetchMessages();\n      interval = setInterval(fetchMessages, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [selectedFriend]);\n  ////////////Select conversation////////////////\n  function handleSelectFriend(friend) {\n    setSelectedFriend(friend);\n    if (friend.sender.username === currentUser) {\n      setSelectedFriendUsername(friend.receiver.username);\n    } else {\n      setSelectedFriendUsername(friend.sender.username);\n    }\n  }\n  ////////////Display messages////////////////\n  function fetchMessages() {\n    const senderId = selectedFriend.sender.id;\n    const receiverId = selectedFriend.receiver.id;\n    const getMessages = (senderId, receiverId) => {\n      return axios.get(`http://localhost:8080/messages/messages?senderId=${senderId}&receiverId=${receiverId}`);\n    };\n    axios.all([getMessages(senderId, receiverId), getMessages(receiverId, senderId)]).then(axios.spread((response1, response2) => {\n      const messages1 = response1.data;\n      const messages2 = response2.data;\n      const allMessages = [...messages1, ...messages2];\n      allMessages.sort((a, b) => new Date(a.sentDateTime) - new Date(b.sentDateTime)); // Sort messages by sentDateTime\n      setMessages(allMessages);\n      setTimeout(() => {\n        scrollToBottom(allMessages.length); // Scroll to the bottom after 0'1 second\n      }, 100);\n    })).catch(error => {\n      console.error('Error fetching messages:', error);\n    });\n  }\n  function scrollToBottom(len) {\n    if (len !== oldlen) {\n      var element = document.getElementById(\"scroll\");\n      element.scrollIntoView(false);\n      element.scrollTop = element.scrollHeight;\n      oldlen = len;\n    }\n  }\n  ////////////send message////////////////\n  function sendMessage() {\n    if (!selectedFriend) {\n      return;\n    }\n    let senderId;\n    let receiverId;\n    if (selectedFriend.sender.username === currentUser) {\n      receiverId = selectedFriend.receiver.id;\n      senderId = selectedFriend.sender.id;\n    } else {\n      receiverId = selectedFriend.sender.id;\n      senderId = selectedFriend.receiver.id;\n    }\n    if (messageInput.trim() !== '') {\n      const messageContent = messageInput;\n      axios.post('http://localhost:8080/messages/addMessage', {\n        senderId: senderId,\n        receiverId: receiverId,\n        content: messageContent\n      }).then(response => {\n        console.log('Message sent successfully');\n        // Do something with the response if needed\n      }).catch(error => {\n        console.error('Error sending message:', error);\n        alert(\"Error with the request, please try again later\");\n      });\n      setMessageInput('');\n    }\n  }\n  ////////////return start here////////////////\n  return /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 4\n  }, this);\n}\n_s(Party, \"+cy0YpmHGVOOZF86A3wGwYKeTDw=\", false, function () {\n  return [useNavigate];\n});\n_c = Party;\nvar _c;\n$RefreshReg$(_c, \"Party\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Modal","Button","Card","Container","Row","Col","Link","useNavigate","jsxDEV","_jsxDEV","Party","_s","navigate","sessionStorage","getItem","pendingFriends","setPendingFriends","confirmedFriends","setConfirmedFriends","errorMessage","setErrorMessage","selectedFriend","setSelectedFriend","selectedFriendUsername","setSelectedFriendUsername","currentUser","setCurrentUser","messageInput","setMessageInput","messages","setMessages","chatWindowRef","showModal","setShowModal","selectedEmote","setSelectedEmote","emotes","setEmotes","oldlen","console","log","handleEmoteSelection","emote","senderId","receiverId","sender","username","receiver","id","sendEmote","emoteId","post","then","response","catch","error","alert","fetchEmotes","get","data","fetchData","message","handleAddFriend","friendId","put","window","location","href","handleCancelFriendship","delete","interval","fetchMessages","setInterval","clearInterval","handleSelectFriend","friend","getMessages","all","spread","response1","response2","messages1","messages2","allMessages","sort","a","b","Date","sentDateTime","setTimeout","scrollToBottom","length","len","element","document","getElementById","scrollIntoView","scrollTop","scrollHeight","sendMessage","trim","messageContent","content","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/maiol/Desktop/projectem12/src/pages/party.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { Modal, Button, Card, Container, Row, Col } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useNavigate } from \"react-router-dom\";\r\nexport default function Party() {\r\n  let navigate = useNavigate();\r\n  if(sessionStorage.getItem(\"username\") == \"admin\"){\r\n      navigate(\"/admin\");\r\n      //window.location.href = '/admin';\r\n  }\r\n  else if(!sessionStorage.getItem(\"username\")){\r\n\r\n      navigate(\"/\");\r\n      //window.location.href = '/';\r\n  }\r\n  const [pendingFriends, setPendingFriends] = useState([]);\r\n  const [confirmedFriends, setConfirmedFriends] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [selectedFriend, setSelectedFriend] = useState(null);\r\n  const [selectedFriendUsername, setSelectedFriendUsername] = useState(null);\r\n  const [currentUser, setCurrentUser] = useState(sessionStorage.getItem('username'));\r\n  const [messageInput, setMessageInput] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const chatWindowRef = useRef(null); // Reference to the chat window container\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [selectedEmote, setSelectedEmote] = useState(null);\r\n  const [emotes, setEmotes] = useState([]);\r\n  var oldlen = null;\r\n  //emote\r\n\r\n\r\nconsole.log(sessionStorage);\r\n\r\n  function handleEmoteSelection(emote) {\r\n    setSelectedEmote(emote);\r\n    setShowModal(false);\r\n\r\n    if (selectedFriend) {\r\n      let senderId;\r\n    let receiverId;\r\n\r\n    if (selectedFriend.sender.username === currentUser) {\r\n      receiverId = selectedFriend.receiver.id;\r\n      senderId = selectedFriend.sender.id;\r\n    } else {\r\n      receiverId = selectedFriend.sender.id;\r\n      senderId = selectedFriend.receiver.id;\r\n    }\r\n\r\n      const sendEmote = (senderId, receiverId, emoteId) => {\r\n        return axios.post('http://localhost:8080/emotes/sendEmote', {\r\n          senderId: senderId,\r\n          receiverId: receiverId,\r\n          emoteId: emoteId\r\n        });\r\n      };\r\n\r\n      sendEmote(senderId, receiverId, emote.id)\r\n        .then(response => {\r\n          console.log('Emote sent successfully');\r\n          // Do something with the response if needed\r\n        })\r\n        .catch(error => {\r\n          console.error('Error sending emote:', error);\r\n          alert('Error sending emote. Please try again later.');\r\n        });\r\n    }\r\n  }\r\n  \r\n  \r\n////////////Do on load////////////////\r\nuseEffect(() => {\r\n  async function fetchEmotes() {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/emotes');\r\n      setEmotes(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching emotes:', error);\r\n    }\r\n  }\r\n\r\n  fetchEmotes();\r\n}, []);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/friend/pending?username=${currentUser}`);\r\n        setPendingFriends(response.data);\r\n        setErrorMessage('');\r\n      } catch (error) {\r\n        setPendingFriends([]);\r\n        if (error.response) {\r\n          const errorMessage = error.response.data.message;\r\n          setErrorMessage(errorMessage);\r\n        } else {\r\n          setErrorMessage('An error occurred while fetching pending friends.');\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/friend/confirmed?username=${currentUser}`);\r\n        setConfirmedFriends(response.data);\r\n        setErrorMessage('');\r\n      } catch (error) {\r\n        setConfirmedFriends([]);\r\n        if (error.response) {\r\n          const errorMessage = error.response.data.message;\r\n          setErrorMessage(errorMessage);\r\n        } else {\r\n          setErrorMessage('An error occurred while fetching confirmed friends.');\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [currentUser]);\r\n  ////////////accept friendship////////////////\r\n  function handleAddFriend(friendId) {\r\n    axios.put(`http://localhost:8080/friend/${friendId}/accept`)\r\n      .then(response => {\r\n        window.location.href = '/';\r\n        console.log('Friend request accepted successfully');\r\n      })\r\n      .catch(error => {\r\n        alert(\"Error with the request, try it later\");\r\n        console.error('Error accepting friend request:', error);\r\n      });\r\n  }\r\n  ////////////Deny friendship////////////////\r\n  function handleCancelFriendship(friendId) {\r\n    axios.delete(`http://localhost:8080/friend/${friendId}`)\r\n      .then(response => {\r\n        window.location.href = '/';\r\n        console.log('Friend request cancelled successfully');\r\n      })\r\n      .catch(error => {\r\n        alert(\"Error with the request, try it later\");\r\n        console.error('Error cancelling friend request:', error);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n\r\n    if (selectedFriend) {\r\n      fetchMessages();\r\n\r\n      interval = setInterval(fetchMessages, 1000);\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n  }, [selectedFriend]);\r\n////////////Select conversation////////////////\r\n  function handleSelectFriend(friend) {\r\n    \r\n    setSelectedFriend(friend);\r\n    if (friend.sender.username === currentUser) {\r\n      setSelectedFriendUsername(friend.receiver.username);\r\n    } else {\r\n      setSelectedFriendUsername(friend.sender.username);\r\n    }\r\n  }\r\n  ////////////Display messages////////////////\r\n  function fetchMessages() {\r\n    const senderId = selectedFriend.sender.id;\r\n    const receiverId = selectedFriend.receiver.id;\r\n\r\n    const getMessages = (senderId, receiverId) => {\r\n      return axios.get(`http://localhost:8080/messages/messages?senderId=${senderId}&receiverId=${receiverId}`);\r\n    };\r\n\r\n\r\n    axios.all([\r\n      getMessages(senderId, receiverId),\r\n      getMessages(receiverId, senderId)\r\n    ])\r\n      .then(axios.spread((response1, response2) => {\r\n        const messages1 = response1.data;\r\n        const messages2 = response2.data;\r\n        const allMessages = [...messages1, ...messages2];\r\n        allMessages.sort((a, b) => new Date(a.sentDateTime) - new Date(b.sentDateTime)); // Sort messages by sentDateTime\r\n        setMessages(allMessages);\r\n        \r\n        setTimeout(() => {\r\n          scrollToBottom(allMessages.length); // Scroll to the bottom after 0'1 second\r\n        }, 100);\r\n      }))\r\n      .catch(error => {\r\n        console.error('Error fetching messages:', error);\r\n      });\r\n  }\r\n\r\n  function scrollToBottom(len) {\r\n    if(len !== oldlen){\r\n      var element = document.getElementById(\"scroll\");\r\n      element.scrollIntoView(false);\r\n      element.scrollTop = element.scrollHeight;\r\n      oldlen = len;\r\n    }\r\n  }\r\n  ////////////send message////////////////\r\n  function sendMessage() {\r\n    if (!selectedFriend) {\r\n      return;\r\n    }\r\n\r\n    let senderId;\r\n    let receiverId;\r\n\r\n    if (selectedFriend.sender.username === currentUser) {\r\n      receiverId = selectedFriend.receiver.id;\r\n      senderId = selectedFriend.sender.id;\r\n    } else {\r\n      receiverId = selectedFriend.sender.id;\r\n      senderId = selectedFriend.receiver.id;\r\n    }\r\n\r\n    if (messageInput.trim() !== '') {\r\n      const messageContent = messageInput;\r\n\r\n      axios.post('http://localhost:8080/messages/addMessage', {\r\n        senderId: senderId,\r\n        receiverId: receiverId,\r\n        content: messageContent\r\n      })\r\n        .then(response => {\r\n          console.log('Message sent successfully');\r\n          // Do something with the response if needed\r\n        })\r\n        .catch(error => {\r\n          console.error('Error sending message:', error);\r\n          alert(\"Error with the request, please try again later\");\r\n        });\r\n\r\n      setMessageInput('');\r\n    }\r\n  }\r\n  ////////////return start here////////////////\r\n  return (\r\n   <h1></h1>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}